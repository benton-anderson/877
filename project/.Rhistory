library(spatialLIBD)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(sctransform)
library(Dino)
library(Matrix)
library(here)
options(max.print=100)
# Get the sce data from spatialLIBD
ehub <- ExperimentHub::ExperimentHub()
sce <- fetch_data(type = "sce", eh = ehub)
scecounts <- assays(sce)$counts
### Get the column indices for the 6 columns
sample_names <- c(151507, 151508, 151669, 151670, 151673, 151674)
scecounts <- scecounts[, coldata$sample_name %in% sample_names]
coldata <- colData(sce)
dim(coldata)
coldata <- coldata[coldata$sample_name %in% sample_names, ]
coldata$sample_name
scecounts <- scecounts[, coldata$sample_name %in% sample_names]
dim(scecounts)
scecounts <- scecounts[, coldata$sample_name %in% sample_names]
dim(scecounts)
### Get the column indices for the 6 columns
sample_names <- c(151507, 151508, 151669, 151670, 151673, 151674)
coldata <- colData(sce)
dim(coldata)
coldata <- coldata[coldata$sample_name %in% sample_names, ]
dim(coldata)
coldata$sample_name
dim(scecounts)
scecounts <- scecounts[, coldata$sample_name %in% sample_names]
dim(scecounts)
coldata <- colData(sce)
dim(coldata)
scecounts <- scecounts[, coldata$sample_name %in% sample_names]
dim(scecounts)
rowsums <- rowSums(scecounts) > 5000
table(rowsums)
scecounts <- scecounts[rowsums, ]
dim(scecounts)
here()
paste(here(), "/data/", sample, "_SCT_norm_sparse.mtx", sep = "")
as.character(151507)
paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
paste(here(), "/data/", "_SCT_norm_sparse.mtx", sep = "")
paste(here(), "/data/", as.character(151507), "_SCT_norm_sparse.mtx", sep = "")
for (sample in sample_names) {
print(sample)
# data_subset <- scecounts[rowsums, coldata$sample_name == sample]
# seuratobject <- CreateSeuratObject(data_subset)
# sct_norm_matrix <- as.matrix(GetAssayData(SCTransform(seuratobject)))
sct_filepath <- paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
# write.csv(sct_norm_matrix, file = sct_filepath)
break
}
# data_subset <- scecounts[rowsums, coldata$sample_name == sample]
# seuratobject <- CreateSeuratObject(data_subset)
# sct_norm_matrix <- as.matrix(GetAssayData(SCTransform(seuratobject)))
sct_filepath <- paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
print(sct_filepath)
for (sample in sample_names) {
print(sample)
# data_subset <- scecounts[rowsums, coldata$sample_name == sample]
# seuratobject <- CreateSeuratObject(data_subset)
# sct_norm_matrix <- as.matrix(GetAssayData(SCTransform(seuratobject)))
sct_filepath <- paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
print(sct_filepath)
# write.csv(sct_norm_matrix, file = sct_filepath)
break
}
for (sample in sample_names) {
print(sample)
data_subset <- scecounts[rowsums, coldata$sample_name == sample]
seuratobject <- CreateSeuratObject(data_subset)
sct_norm_matrix <- as.matrix(GetAssayData(SCTransform(seuratobject)))
sct_filepath <- paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
print(sct_filepath)
write.csv(sct_norm_matrix, file = sct_filepath)
# break
}
# spe <- sce_to_spe(sce)  # Convert to a SpatialExperiment object
scecounts <- assays(sce)$counts
### Get the column indices for the 6 columns
sample_names <- c(151507, 151508, 151669, 151670, 151673, 151674)
coldata <- colData(sce)
# scecounts <- scecounts[, coldata$sample_name %in% sample_names]
# dim(scecounts)
rowsums <- rowSums(scecounts) > 5000
table(rowsums)
scecounts <- scecounts[rowsums, ]
dim(scecounts)
# scecounts <- scecounts[, coldata$sample_name %in% sample_names]
# dim(scecounts)
rowsums <- rowSums(scecounts) > 10000
table(rowsums)
scecounts <- scecounts[rowsums, ]
dim(scecounts)
here()
paste(here(), "/data/", as.character(151507), "_SCT_norm_sparse.mtx", sep = "")
for (sample in sample_names) {
print(sample)
data_subset <- scecounts[rowsums, coldata$sample_name == sample]
seuratobject <- CreateSeuratObject(data_subset)
sct_norm_matrix <- as.matrix(GetAssayData(SCTransform(seuratobject)))
sct_filepath <- paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
print(sct_filepath)
write.csv(sct_norm_matrix, file = sct_filepath)
# break
}
for (sample in sample_names) {
print(sample)
data_subset <- scecounts[, coldata$sample_name == sample]
seuratobject <- CreateSeuratObject(data_subset)
sct_norm_matrix <- as.matrix(GetAssayData(SCTransform(seuratobject)))
sct_filepath <- paste(here(), "/data/", as.character(sample), "_SCT_norm_sparse.mtx", sep = "")
print(sct_filepath)
write.csv(sct_norm_matrix, file = sct_filepath)
# break
}
## DINO NORMALIZE INDIVIDUAL MATRICES
for (sample in sample_names) {
print(sample)
dino_norm_matrix <- Dino(as.matrix(scecounts[, coldata$sample_name == sample]), ncores=0)
dino_filepath <- paste(here(), "/data/Dino_norms/", as.character(sample),
"_Dino_norm_sparse.csv", sep = "")
print(dino_filepath)
write.csv(dino_norm_matrix, file = dino_filepath)
# break
}
Dino(as.matrix(scecounts[, coldata$sample_name == 151507]), ncores=0)
scecounts[, coldata$sample_name == 151507]
f
Dino(as.matrix(scecounts[, coldata$sample_name == 151507]))
Dino(as.matrix(scecounts[, coldata$sample_name == 151507]), nCores=7)
?serialize
Dino(as.matrix(scecounts[, coldata$sample_name == 151507]))
parallel::detectCores()
Dino(as.matrix(scecounts[, coldata$sample_name == 151507]))
library(spatialLIBD)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(sctransform)
library(Dino)
library(Matrix)
library(here)
options(max.print=100)
# Get the sce data from spatialLIBD
ehub <- ExperimentHub::ExperimentHub()
sce <- fetch_data(type = "sce", eh = ehub)
# spe <- sce_to_spe(sce)  # Convert to a SpatialExperiment object
scecounts <- assays(sce)$counts
### Get the column indices for the 6 columns
sample_names <- c(151507, 151508, 151669, 151670, 151673, 151674)
coldata <- colData(sce)
# scecounts <- scecounts[, coldata$sample_name %in% sample_names]
# dim(scecounts)
rowsums <- rowSums(scecounts) > 10000
table(rowsums)
scecounts <- scecounts[rowsums, ]
dim(scecounts)
test <- Dino(as.matrix(scecounts[, coldata$sample_name == 151507]))
rm("sce")
rm("seuratobject")
## DINO NORMALIZE INDIVIDUAL MATRICES
for (sample in sample_names) {
print(sample)
dino_norm_matrix <- Dino(as.matrix(scecounts[, coldata$sample_name == sample]), nCores=6)
dino_filepath <- paste(here(), "/data/Dino_norms/", as.character(sample),
"_Dino_norm_sparse.csv", sep = "")
print(dino_filepath)
write.csv(dino_norm_matrix, file = dino_filepath)
# break
}
## DINO NORMALIZE INDIVIDUAL MATRICES
for (sample in sample_names) {
print(sample)
dino_norm_matrix <- Dino(as.matrix(scecounts[, coldata$sample_name == sample]), nCores=4)
dino_filepath <- paste(here(), "/data/Dino_norms/", as.character(sample),
"_Dino_norm_sparse.csv", sep = "")
print(dino_filepath)
write.csv(dino_norm_matrix, file = dino_filepath)
# break
}
warnings()
sce <- fetch_data(type = "sce", eh = ehub)
# dim(mycounts)
# colnames(mycounts)
# colData(sce)$sample_name %in% c(151507, 151669, 151673)
# x <- grep("151507|151669|151673", colData(sce)$sample_name)
# length(colData(sce)$sample_name)
# table(colData(sce)$sample_name %in% c(151507, 151669, 151673))
# assays(sce)$counts[, colData(sce)$sample_name]
# as.matrix(assays(sce)$counts[, colData(sce)$sample_name])
sce
# dim(mycounts)
# colnames(mycounts)
# colData(sce)$sample_name %in% c(151507, 151669, 151673)
# x <- grep("151507|151669|151673", colData(sce)$sample_name)
# length(colData(sce)$sample_name)
# table(colData(sce)$sample_name %in% c(151507, 151669, 151673))
# assays(sce)$counts[, colData(sce)$sample_name]
# as.matrix(assays(sce)$counts[, colData(sce)$sample_name])
colData(sce)
# dim(mycounts)
# colnames(mycounts)
# colData(sce)$sample_name %in% c(151507, 151669, 151673)
# x <- grep("151507|151669|151673", colData(sce)$sample_name)
# length(colData(sce)$sample_name)
# table(colData(sce)$sample_name %in% c(151507, 151669, 151673))
# assays(sce)$counts[, colData(sce)$sample_name]
# as.matrix(assays(sce)$counts[, colData(sce)$sample_name])
write.csv(colData(sce), 'coldata.csv')
write.csv(rowData(sce), 'rowdata.csv')
# scecounts <- scecounts[, coldata$sample_name %in% sample_names]
# dim(scecounts)
rowsums <- rowSums(scecounts) > 10000
table(rowsums)
